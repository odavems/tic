 public function it_paginates_tickets_correctly_with_auth()
    {

	// Arrange: Create 12 tickets
        $this->insertTestTickets(12);

        // Act: Get first page with auth
    $response = $this->makeTicketsRequest('get', '/api/v1/ots', [], $this->getAuthHeaders());

    // Assert first page
    $this->assertEquals(200, $response->status());
    $responseData = $response->json();
    $this->assertCount(5, $responseData['tickets']);
    $this->assertEquals(3, $responseData['total_pages']);
    $this->assertEquals(1, $responseData['current_page']);

    // Act: Get second page with auth - using proper query parameters
    $response = $this->makeTicketsRequest('get', '/api/v1/ots', [], $this->getAuthHeaders(), ['page' => 2]);

    // Assert second page
    $this->assertEquals(200, $response->status());
    $responseData = $response->json();
    
    // Debug: Let's see what we're actually getting
    dump('Second page response:', $responseData);
    
    $this->assertCount(5, $responseData['tickets']);
    $this->assertEquals(3, $responseData['total_pages']);
    $this->assertEquals(2, $responseData['current_page']);
        
    }
    
    
       public function index()
    {
        try {
            $tickets_per_page = 5; // Define how many tickets to display per page
            $page = isset($_GET['page']) ? (int)$_GET['page'] : 1; // Get the current page number
            $offset = ($page - 1) * $tickets_per_page;
    
            // Get total number of tickets
            $total_tickets = DB::table($this->table)->count();
            $total_pages = ceil($total_tickets / $tickets_per_page);
    
            // Using Laravel's query builder for MySQL with pagination
            $tickets = DB::table($this->table)
                ->orderBy('created_at', 'desc')  // Add this line to order by 'created_at' in descending order
                ->offset($offset)
                ->limit($tickets_per_page)
                ->get();
    
            return response()->json([
                'tickets' => $tickets,
                'total_pages' => $total_pages,
                'current_page' => $page
            ], Response::HTTP_OK);
    
        } catch (Exception $ex) {
            return response()->json([
                'error' => $ex->getMessage()
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }